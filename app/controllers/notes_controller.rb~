require 'bluecloth'

class NotesController < ApplicationController
  before_filter :login_required, :except => :show

  # GET /notes/1
  def show
    @note = Note.find(params[:id])
  end

  # GET /notes/new
  def new
    @note = Note.new

    init_session_user_lists
    @user_lists = user_lists

    #get the selected list name
    if list_id = params[:list_id]
      @list_id = list_id
    end

    respond_to do |format|
      format.html # new.html.erb
    end
  end

  # GET /notes/1/edit
  def edit
    @note = Note.find(params[:id])

    if @note
      init_session_user_lists

      #check that this note belongs to this user   
      if not user_lists.has_value? @note.list_id
        flash[:notice] = "You can only edit your own notes"
        redirect_to notes_path(params[:id])
      end
    else
      flash[:notice] = "that note couldn't be found"
    end
  end

  # POST /notes
  def create
    init_session_user_lists
    
    if user_lists.has_value? params[:list_id] 
      flash[:notice] = 'you can\'t add notes to lists you don\'t own'
      redirect :controller => lists
    end

    if params.has_key? :note
      @note = Note.new(params[:note])
    else
      #if the form wasn't submitted by the form set the parameters individually
      @note = Note.new()
      @note.list_id = params[:list_id]
      @note.title = params[:title]
      @note.description = params[:description]
      @note.url = params[:url]
    end

    if not @note.title or @note.title.empty?
      #set the title using the url or description if not set
      if @note.url and not @note.url.empty?
        @note.title = @note.url[0..255]
      elsif @note.description and not @note.description.empty?
        @note.title = @note.description[0..255]
      end
    end

    if not @note.title or @note.title.empty?
      #don't create the note.
      flash[:notice] = 'You must fill in at least one field'
    end

    respond_to do |format|
      if @note.save
        flash[:notice] = 'Note was successfully created.'
        format.html { redirect_to :controller => :lists, :action => :show, :id => @note.list_id }
      else
        format.html { render :action => "new" }
      end
    end
  end

  # PUT /notes/1
  # PUT /notes/1.xml
  def update
    @note = Note.find(params[:id])

    if @note and user_lists.has_value? @note.list_id

      respond_to do |format|
        if @note.update_attributes(params[:note])
          flash[:notice] = 'Note was successfully updated.'
          format.html { redirect_to(@note) }
        else
          format.html { render :action => "edit" }
        end
       end
    else
        #if note isn't nil then the user is trying to edit someone elses notes
        if @note
          flash[:notice] = 'note couldn\'t be found'
        else
          flash[:notice] = 'you can\'t edit notes that you don\'t own'
        end
        redirect :controller => 'lists'
    end
  end

  # DELETE /notes/1
  def destroy
    @note = Note.find(params[:id])
    @note.destroy

    respond_to do |format|
      format.html { redirect_to(notes_url) }
      format.xml  { head :ok }
    end
  end
end
