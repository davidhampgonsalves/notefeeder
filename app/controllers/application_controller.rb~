# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.

class ApplicationController < ActionController::Base
  protect_from_forgery # See ActionController::RequestForgeryProtection for details

  # Scrub sensitive parameters from your log
  # filter_parameter_logging :password

  #returns false if user is not logged in
  #and redirects to the login page. true otherwise  
  def login_required
    #check if the user is logged in
    if session[:user]
      return true
    end

    #user is not logged in, save the original request
    session[:org_request] = request.request_uri

    #if the user was included in the request pass it along to the login controller 
    #redirect to login page
    redirect_to :controller => :login
    return false
  end

  #returns the current user (name)
  def user
    session[:user]
  end

  def login_user(user)
    session[:user] = user
  end

  #returns the users lists hash from the session if it exists
  def user_lists
    session[:user_lists]
  end

  #returns the users lists hash from the session if it exists
  def deleted_user_lists
    session[:deleted_user_lists]
  end

  #redirects the user to the orginally requested uri
  def redirect_to_org_request
    if org_request = session[:org_request]
      redirect_to org_request
    else
      redirect_to :controller => :lists
    end
  end

  #returns if the user lists have been cached
  def user_lists_cached?()
    #TODO: don't know why but this fixes the problem, if not has key returns a non bool result    
    #session[:user_lists]
    #session.delete :user_lists
    #if session.has_key? :user_lists
    if user_lists != nil
      return true
    else
      return false
    end
  end

  #initilizes(if required) the hash containing the list name/id pairs
  def init_session_user_lists
    #create the user lists hash if it doesn't already exist
    if user_lists_cached?
      #get the lists for this user
      lists = List.all(:conditions => {:user => user})

      lists_hash = {}
      deleted_lists_hash = {} 
      # the hash uses the list name as the key and the id as the value     
      lists.each do | list |
        if list.deleted
          deleted_lists_hash[list.name] = create_list_hash(list)
        else
          lists_hash[list.name] = create_list_hash(list)
        end
      end
      #save it to the session
      session[:user_lists] = lists_hash
      session[:deleted_user_lists] = deleted_lists_hash
    end
  end


  #creates a hash representing a list
  def create_list_hash(list)
    return {:name => list.name, :has_public_url => list.has_public_url, :id => list.id}
  end
end
